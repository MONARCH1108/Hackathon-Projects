from flask import Flask, request, render_template_string, jsonify
import requests
import json
import re
from urllib.parse import urlparse
import subprocess
import os

app = Flask(__name__)

# OWASP Top 10 2021 categories
OWASP_TOP_10 = {
    "A01:2021": "Broken Access Control",
    "A02:2021": "Cryptographic Failures", 
    "A03:2021": "Injection",
    "A04:2021": "Insecure Design",
    "A05:2021": "Security Misconfiguration",
    "A06:2021": "Vulnerable and Outdated Components",
    "A07:2021": "Identification and Authentication Failures",
    "A08:2021": "Software and Data Integrity Failures",
    "A09:2021": "Security Logging and Monitoring Failures",
    "A10:2021": "Server-Side Request Forgery (SSRF)"
}

class OWASPAnalyzer:
    def __init__(self):
        self.ollama_url = "http://localhost:11434/api/generate"
        self.model = "llama3.2:latest"
    
    def call_ollama(self, prompt):
        """Call Ollama API with the given prompt"""
        try:
            payload = {
                "model": self.model,
                "prompt": prompt,
                "stream": False
            }
            
            response = requests.post(self.ollama_url, json=payload, timeout=60)
            
            if response.status_code == 200:
                return response.json().get('response', '')
            else:
                return f"Error calling Ollama: {response.status_code}"
                
        except requests.exceptions.RequestException as e:
            return f"Connection error: {str(e)}"
    
    def fetch_url_content(self, url):
        """Fetch content from URL if it's accessible"""
        try:
            # Basic URL validation
            parsed = urlparse(url)
            if not parsed.scheme or not parsed.netloc:
                return None, "Invalid URL format"
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            response = requests.get(url, headers=headers, timeout=10, allow_redirects=True)
            
            if response.status_code == 200:
                return response.text, None
            else:
                return None, f"HTTP {response.status_code}"
                
        except requests.exceptions.RequestException as e:
            return None, f"Request failed: {str(e)}"
    
    def create_analysis_prompt(self, code_content, content_type="code"):
        """Create a detailed prompt for OWASP Top 10 analysis"""
        
        owasp_descriptions = """
        OWASP Top 10 2021:
        A01: Broken Access Control - Missing or improper access controls, privilege escalation
        A02: Cryptographic Failures - Weak encryption, exposed sensitive data, poor key management
        A03: Injection - SQL injection, XSS, command injection, LDAP injection
        A04: Insecure Design - Design flaws, missing security controls in architecture
        A05: Security Misconfiguration - Default configs, incomplete setups, verbose errors
        A06: Vulnerable Components - Outdated libraries, unpatched software
        A07: Authentication Failures - Weak passwords, session management issues
        A08: Data Integrity Failures - Insecure deserialization, untrusted software updates
        A09: Logging/Monitoring Failures - Insufficient logging, no monitoring
        A10: SSRF - Server-side requests to unvalidated URLs
        """
        
        prompt = f"""
        You are a cybersecurity expert analyzing {content_type} for OWASP Top 10 vulnerabilities.
        
        {owasp_descriptions}
        
        Analyze the following {content_type} and identify which OWASP Top 10 vulnerabilities are present:
        
        {code_content}
        
        For each vulnerability found, provide:
        1. OWASP Category (e.g., A03:2021)
        2. Vulnerability Name
        3. Specific line/section where vulnerability exists
        4. Risk Level (Critical/High/Medium/Low)
        5. Detailed explanation of the vulnerability
        6. Remediation suggestions
        
        Format your response as JSON:
        {{
            "vulnerabilities": [
                {{
                    "owasp_category": "A03:2021",
                    "name": "SQL Injection",
                    "location": "line 45",
                    "risk_level": "Critical",
                    "description": "Direct SQL query construction with user input",
                    "remediation": "Use parameterized queries or ORM"
                }}
            ],
            "summary": {{
                "total_vulnerabilities": 1,
                "critical": 1,
                "high": 0,
                "medium": 0,
                "low": 0
            }}
        }}
        
        If no vulnerabilities are found, return empty vulnerabilities array.
        """
        
        return prompt
    
    def analyze_content(self, content, content_type="code"):
        """Analyze content for OWASP Top 10 vulnerabilities"""
        prompt = self.create_analysis_prompt(content, content_type)
        
        # Get analysis from Ollama
        response = self.call_ollama(prompt)
        
        # Try to parse JSON response
        try:
            # Extract JSON from response if it contains additional text
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            if json_match:
                json_str = json_match.group()
                analysis = json.loads(json_str)
            else:
                # Fallback if JSON parsing fails
                analysis = {
                    "vulnerabilities": [],
                    "summary": {"total_vulnerabilities": 0, "critical": 0, "high": 0, "medium": 0, "low": 0},
                    "raw_response": response
                }
        except (json.JSONDecodeError, AttributeError):
            analysis = {
                "vulnerabilities": [],
                "summary": {"total_vulnerabilities": 0, "critical": 0, "high": 0, "medium": 0, "low": 0},
                "raw_response": response,
                "error": "Failed to parse JSON response"
            }
        
        return analysis

analyzer = OWASPAnalyzer()

@app.route('/')
def index():
    return render_template_string(HTML_TEMPLATE)

@app.route('/analyze', methods=['POST'])
def analyze():
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "No data provided"}), 400
        
        input_type = data.get('type')  # 'code' or 'url'
        content = data.get('content', '').strip()
        
        if not content:
            return jsonify({"error": "No content provided"}), 400
        
        if input_type == 'url':
            # Fetch content from URL
            url_content, error = analyzer.fetch_url_content(content)
            if error:
                return jsonify({"error": f"Failed to fetch URL: {error}"}), 400
            
            analysis = analyzer.analyze_content(url_content, "web page")
            analysis['analyzed_url'] = content
            
        elif input_type == 'code':
            # Analyze provided code directly
            analysis = analyzer.analyze_content(content, "code")
            
        else:
            return jsonify({"error": "Invalid input type. Use 'code' or 'url'"}), 400
        
        return jsonify(analysis)
        
    except Exception as e:
        return jsonify({"error": f"Analysis failed: {str(e)}"}), 500

@app.route('/health')
def health():
    """Check if Ollama is accessible"""
    try:
        response = requests.get("http://localhost:11434/api/tags", timeout=5)
        if response.status_code == 200:
            return jsonify({"status": "healthy", "ollama": "connected"})
        else:
            return jsonify({"status": "unhealthy", "ollama": "disconnected"}), 503
    except:
        return jsonify({"status": "unhealthy", "ollama": "disconnected"}), 503

# HTML Template for the web interface
HTML_TEMPLATE = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OWASP Top 10 Vulnerability Scanner</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .header p {
            font-size: 1.1em;
            opacity: 0.9;
        }
        
        .content {
            padding: 30px;
        }
        
        .input-section {
            margin-bottom: 30px;
        }
        
        .tab-buttons {
            display: flex;
            margin-bottom: 20px;
        }
        
        .tab-button {
            flex: 1;
            padding: 15px;
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 16px;
        }
        
        .tab-button.active {
            background: #007bff;
            color: white;
        }
        
        .tab-button:first-child {
            border-radius: 5px 0 0 5px;
        }
        
        .tab-button:last-child {
            border-radius: 0 5px 5px 0;
        }
        
        .input-area {
            margin-bottom: 20px;
        }
        
        .input-area label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }
        
        .input-area input, .input-area textarea {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
            font-family: 'Courier New', monospace;
        }
        
        .input-area textarea {
            height: 200px;
            resize: vertical;
        }
        
        .analyze-btn {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s;
            width: 100%;
        }
        
        .analyze-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(40, 167, 69, 0.4);
        }
        
        .analyze-btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }
        
        .loading {
            display: none;
            text-align: center;
            padding: 20px;
            color: #007bff;
        }
        
        .loading.show {
            display: block;
        }
        
        .results {
            margin-top: 30px;
            display: none;
        }
        
        .results.show {
            display: block;
        }
        
        .summary {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
            border-left: 4px solid #007bff;
        }
        
        .vulnerability {
            background: white;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin-bottom: 15px;
            overflow: hidden;
        }
        
        .vuln-header {
            padding: 15px;
            cursor: pointer;
            transition: background 0.3s;
        }
        
        .vuln-header:hover {
            background: #f8f9fa;
        }
        
        .vuln-header.critical {
            border-left: 4px solid #dc3545;
            background: #fff5f5;
        }
        
        .vuln-header.high {
            border-left: 4px solid #fd7e14;
            background: #fff8f0;
        }
        
        .vuln-header.medium {
            border-left: 4px solid #ffc107;
            background: #fffbf0;
        }
        
        .vuln-header.low {
            border-left: 4px solid #28a745;
            background: #f8fff8;
        }
        
        .vuln-details {
            padding: 15px;
            background: #f8f9fa;
            border-top: 1px solid #ddd;
            display: none;
        }
        
        .vuln-details.show {
            display: block;
        }
        
        .risk-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 3px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
        }
        
        .risk-critical {
            background: #dc3545;
            color: white;
        }
        
        .risk-high {
            background: #fd7e14;
            color: white;
        }
        
        .risk-medium {
            background: #ffc107;
            color: #333;
        }
        
        .risk-low {
            background: #28a745;
            color: white;
        }
        
        .error {
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 5px;
            border: 1px solid #f5c6cb;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🛡️ OWASP Top 10 Scanner</h1>
            <p>Analyze code and URLs for security vulnerabilities using AI</p>
        </div>
        
        <div class="content">
            <div class="input-section">
                <div class="tab-buttons">
                    <div class="tab-button active" onclick="switchTab('code')">Analyze Code</div>
                    <div class="tab-button" onclick="switchTab('url')">Analyze URL</div>
                </div>
                
                <div id="code-input" class="input-area">
                    <label for="code-content">Enter your code:</label>
                    <textarea id="code-content" placeholder="Paste your code here for analysis..."></textarea>
                </div>
                
                <div id="url-input" class="input-area" style="display: none;">
                    <label for="url-content">Enter URL:</label>
                    <input type="url" id="url-content" placeholder="https://example.com">
                </div>
                
                <button class="analyze-btn" onclick="analyzeContent()">🔍 Analyze for Vulnerabilities</button>
            </div>
            
            <div class="loading" id="loading">
                <h3>🔄 Analyzing content...</h3>
                <p>This may take a few moments while the AI examines your content for vulnerabilities.</p>
            </div>
            
            <div class="results" id="results">
                <div class="summary" id="summary"></div>
                <div id="vulnerabilities"></div>
            </div>
            
            <div class="error" id="error" style="display: none;"></div>
        </div>
    </div>

    <script>
        let currentTab = 'code';
        
        function switchTab(tab) {
            currentTab = tab;
            
            // Update tab buttons
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            // Show/hide input areas
            document.getElementById('code-input').style.display = tab === 'code' ? 'block' : 'none';
            document.getElementById('url-input').style.display = tab === 'url' ? 'block' : 'none';
        }
        
        async function analyzeContent() {
            const content = currentTab === 'code' 
                ? document.getElementById('code-content').value.trim()
                : document.getElementById('url-content').value.trim();
            
            if (!content) {
                showError('Please provide content to analyze.');
                return;
            }
            
            // Show loading, hide results and errors
            document.getElementById('loading').classList.add('show');
            document.getElementById('results').classList.remove('show');
            document.getElementById('error').style.display = 'none';
            document.querySelector('.analyze-btn').disabled = true;
            
            try {
                const response = await fetch('/analyze', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        type: currentTab,
                        content: content
                    })
                });
                
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error || 'Analysis failed');
                }
                
                displayResults(data);
                
            } catch (error) {
                showError(`Analysis failed: ${error.message}`);
            } finally {
                document.getElementById('loading').classList.remove('show');
                document.querySelector('.analyze-btn').disabled = false;
            }
        }
        
        function displayResults(data) {
            const summaryEl = document.getElementById('summary');
            const vulnerabilitiesEl = document.getElementById('vulnerabilities');
            
            // Display summary
            const summary = data.summary || {};
            summaryEl.innerHTML = `
                <h3>📊 Analysis Summary</h3>
                <p><strong>Total Vulnerabilities:</strong> ${summary.total_vulnerabilities || 0}</p>
                <p>
                    <span class="risk-badge risk-critical">Critical: ${summary.critical || 0}</span>
                    <span class="risk-badge risk-high">High: ${summary.high || 0}</span>
                    <span class="risk-badge risk-medium">Medium: ${summary.medium || 0}</span>
                    <span class="risk-badge risk-low">Low: ${summary.low || 0}</span>
                </p>
            `;
            
            // Display vulnerabilities
            vulnerabilitiesEl.innerHTML = '';
            
            if (data.vulnerabilities && data.vulnerabilities.length > 0) {
                data.vulnerabilities.forEach((vuln, index) => {
                    const vulnEl = document.createElement('div');
                    vulnEl.className = 'vulnerability';
                    
                    const riskClass = (vuln.risk_level || 'low').toLowerCase();
                    
                    vulnEl.innerHTML = `
                        <div class="vuln-header ${riskClass}" onclick="toggleDetails(${index})">
                            <h4>🚨 ${vuln.name || 'Unknown Vulnerability'}</h4>
                            <p><strong>OWASP:</strong> ${vuln.owasp_category || 'N/A'} | 
                               <strong>Location:</strong> ${vuln.location || 'N/A'} | 
                               <span class="risk-badge risk-${riskClass}">${vuln.risk_level || 'Low'}</span>
                            </p>
                        </div>
                        <div class="vuln-details" id="details-${index}">
                            <h5>📝 Description:</h5>
                            <p>${vuln.description || 'No description available'}</p>
                            <h5>🔧 Remediation:</h5>
                            <p>${vuln.remediation || 'No remediation suggestions available'}</p>
                        </div>
                    `;
                    
                    vulnerabilitiesEl.appendChild(vulnEl);
                });
            } else {
                vulnerabilitiesEl.innerHTML = '<div class="summary">✅ No vulnerabilities detected in the provided content.</div>';
            }
            
            // Show raw response if available (for debugging)
            if (data.raw_response && data.error) {
                vulnerabilitiesEl.innerHTML += `
                    <div class="summary">
                        <h4>⚠️ Debug Information:</h4>
                        <p><strong>Error:</strong> ${data.error}</p>
                        <details>
                            <summary>Raw AI Response</summary>
                            <pre style="white-space: pre-wrap; font-size: 12px;">${data.raw_response}</pre>
                        </details>
                    </div>
                `;
            }
            
            document.getElementById('results').classList.add('show');
        }
        
        function toggleDetails(index) {
            const details = document.getElementById(`details-${index}`);
            details.classList.toggle('show');
        }
        
        function showError(message) {
            const errorEl = document.getElementById('error');
            errorEl.textContent = message;
            errorEl.style.display = 'block';
        }
    </script>
</body>
</html>
'''

if __name__ == '__main__':
    print("🛡️ OWASP Top 10 Vulnerability Scanner")
    print("="*50)
    print("Prerequisites:")
    print("1. Install Ollama: https://ollama.ai/")
    print("2. Pull Llama 3.2: 'ollama pull llama3.2'")
    print("3. Install Python dependencies: 'pip install flask requests'")
    print()
    print("Starting Flask server...")
    print("Access the web interface at: http://localhost:5000")
    print("Health check endpoint: http://localhost:5000/health")
    print()
    
    app.run(debug=True, host='0.0.0.0', port=5000)